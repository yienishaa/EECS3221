#include "sch-helpers.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>
#include <time.h>

                                        //process data structure is in helpers.creates a queue node (to be attached to a queue) to hold a process
process processes[MAX_PROCESSES+1];   // a large structure array to hold all processes read from data file 
int numberOfProcesses= 0;              // total number of processes 

int main(int argc, char *argv[])
{
    int status = 0;
    

    //We need 3 process queues, ReadyQ and IO_waitingQ, cpuQ
    process_queue* readyQ;
    process_queue* ioWaitQ;
    //process_queue* cpuQ;

    initializeProcessQueue(readyQ);
    initializeProcessQueue(ioWaitQ);
    //initializeProcessQueue(cpuQ);
    
    
    

    //Read all the processors and add it to the linked list "processes"
    while ((status=readProcess(&processes[numberOfProcesses])))  {

        

        if(status==1){
            numberOfProcesses ++;
        }
    }

    //sort process by arrival time
    //void qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))
    //qsort(processes, numberOfProcesses, sizeof(process), compareByArrival);

    printf("%d\n",processes[0].pid);
    
    /*for(int i=0; i<numberOfProcesses; i++){

        process_node* node = createProcessNode(&processes[numberOfProcesses]);
        printf("Node PID=%d\n",node->data->currentBurst);

    }*/

    
    int time = 0; //milliseconds

    /*while(readyQ->size!=0 || cpuQ->size!=0 || ioWaitQ->size!=0 )
    {

    }*/
        
        

       // enqueueProcess(readyQ, node);
       // printf("Enqueued size=%d\n",readyQ->back);
        
        
       // dequeueProcess(process_queue1);

        //dequeueProcess(processes); 


    

}